{"version":3,"file":"commonHelpers.js","sources":["../src/js/01-timer.js"],"sourcesContent":["// Настройка Flatpickr:\n// Подключаем библиотеку Flatpickr для работы с выбором даты и времени.\n\nimport flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast/dist/js/iziToast.min.js\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n// Определяем переменные userSelectedDate и timerInterval, которые будут использоваться для хранения выбранной даты и идентификатора интервала таймера соответственно.\nlet userSelectedDate;\nlet timerInterval;\n\n// Задаем опции для Flatpickr, включая возможность выбора времени и формат 24 часа.\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    validateSelectedDate();\n  },\n};\n\n\n\n// Обработка закрытия Flatpickr и валидация выбранной даты:\n// Находим кнопку \"Start\" и сохраняем ее в переменной startButton\nconst startButton = document.querySelector('[data-start]');\n\nfunction validateSelectedDate() {\n  const currentDate = new Date();\n  if (userSelectedDate < currentDate) {\n    iziToast.error({\n      title: 'Error',\n      message: 'Please choose a date in the future',\n      position: 'topCenter',\n    });\n    startButton.disabled = true;\n  } else {\n    startButton.disabled = false;\n  }\n}\n// Преобразование миллисекунд в объект времени:\n// Создаем функцию convertMs, которая принимает количество миллисекунд и преобразует его в объект с днями, часами, минутами и секундами.\nfunction convertMs(ms) {\n  // Количество миллисекунд в единице времени\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Оставшиеся дни\n  const days = Math.floor(ms / day);\n  // Оставшиеся часы\n  const hours = Math.floor((ms % day) / hour);\n  // Оставшиеся минуты\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Оставшиеся секунды\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n// Инициализация Flatpickr и обработка клика по кнопке \"Start\":\n// Инициализируем Flatpickr для элемента с идентификатором datetime-picker с использованием заданных опций.\nflatpickr(\"#datetime-picker\", options);\n\n// Устанавливаем обработчик события click на кнопку \"Start\", который вызывает функцию startTimer.\nstartButton.addEventListener('click', function () {\n  // Когда нажата кнопка \"Start\", запускаем таймер\n  startTimer();\n});\n\n\n// Запуск таймера и обновление интерфейса:\n// Создаем функцию startTimer, которая инициализирует таймер, вычисляет разницу во времени между выбранной и текущей датами, а затем обновляет интерфейс таймера.\nfunction startTimer() {\n  const currentDate = new Date().getTime();\n  const selectedDate = userSelectedDate.getTime();\n  let timeDifference = selectedDate - currentDate;\n\n  updateTimerUI(timeDifference);\n  // Устанавливаем интервал, который каждую секунду обновляет интерфейс и проверяет, не достигнута ли конечная дата.\n  timerInterval = setInterval(function () {\n    timeDifference -= 1000;\n    updateTimerUI(timeDifference);\n\n    if (timeDifference <= 0) {\n      clearInterval(timerInterval);\n    }\n  }, 1000);\n}\n\n// Обновление интерфейса таймера:\n// Создаем функцию updateTimerUI, которая обновляет значения элементов таймера на странице с использованием объекта времени.\nfunction updateTimerUI(timeDifference) {\n  const timeObject = convertMs(timeDifference);\n\n  // Обновляем значения элементов таймера\n  // В этой функции вызывается также вспомогательная функция padZero, которая добавляет ведущий ноль к числам меньше 10.\n  document.querySelector('[data-days]').textContent = padZero(timeObject.days);\n  document.querySelector('[data-hours]').textContent = padZero(timeObject.hours);\n  document.querySelector('[data-minutes]').textContent = padZero(timeObject.minutes);\n  document.querySelector('[data-seconds]').textContent = padZero(timeObject.seconds);\n}\n// Вспомогательная функция добавления ведущего нуля:\nfunction padZero(value) {\n  return value < 10 ? `0${value}` : value;\n}\n"],"names":["userSelectedDate","timerInterval","options","selectedDates","validateSelectedDate","startButton","currentDate","iziToast","convertMs","ms","days","hours","minutes","seconds","flatpickr","startTimer","timeDifference","updateTimerUI","timeObject","padZero","value"],"mappings":"2GASA,IAAIA,EACAC,EAGJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBH,EAAmBG,EAAc,GACjCC,GACD,CACH,EAMMC,EAAc,SAAS,cAAc,cAAc,EAEzD,SAASD,GAAuB,CAC9B,MAAME,EAAc,IAAI,KACpBN,EAAmBM,GACrBC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAU,WAChB,CAAK,EACDF,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE3B,CAGA,SAASG,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAGAC,EAAU,mBAAoBZ,CAAO,EAGrCG,EAAY,iBAAiB,QAAS,UAAY,CAEhDU,GACF,CAAC,EAKD,SAASA,GAAa,CACpB,MAAMT,EAAc,IAAI,KAAM,EAAC,QAAO,EAEtC,IAAIU,EADiBhB,EAAiB,UACFM,EAEpCW,EAAcD,CAAc,EAE5Bf,EAAgB,YAAY,UAAY,CACtCe,GAAkB,IAClBC,EAAcD,CAAc,EAExBA,GAAkB,GACpB,cAAcf,CAAa,CAE9B,EAAE,GAAI,CACT,CAIA,SAASgB,EAAcD,EAAgB,CACrC,MAAME,EAAaV,EAAUQ,CAAc,EAI3C,SAAS,cAAc,aAAa,EAAE,YAAcG,EAAQD,EAAW,IAAI,EAC3E,SAAS,cAAc,cAAc,EAAE,YAAcC,EAAQD,EAAW,KAAK,EAC7E,SAAS,cAAc,gBAAgB,EAAE,YAAcC,EAAQD,EAAW,OAAO,EACjF,SAAS,cAAc,gBAAgB,EAAE,YAAcC,EAAQD,EAAW,OAAO,CACnF,CAEA,SAASC,EAAQC,EAAO,CACtB,OAAOA,EAAQ,GAAK,IAAIA,IAAUA,CACpC"}